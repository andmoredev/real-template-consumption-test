name: Cleanup Temporary Environment
run-name: Cleanup ${{ (github.event_name == 'workflow_dispatch' && github.ref_name) || (github.event_name == 'delete' && github.event.ref) || (github.event_name == 'pull_request' && github.head_ref) }}

on:
  pull_request:
    types: [closed]

  workflow_dispatch:
    inputs:
      tf_log_level:
        type: choice
        description: 'Select the log level for Terraform'
        default: ERROR
        options:
          - DEBUG
          - INFO
          - WARN
          - ERROR
env:
  JIRA_PREFIX: 'TP'
  FULL_BRANCH_NAME: ${{ github.event_name == 'workflow_dispatch' && github.ref_name || github.event_name == 'pull_request' && github.head_ref || github.event_name == 'push' && github.ref_name }}

permissions:
  id-token: write
  contents: read

jobs:
  cleanup-environment:
    name: Cleanup Environment
    runs-on: ubuntu-latest
    environment: temporary
    steps:
      - name: Resolve Logical Environment Name
        run: |
          # Extract the Jira number from the branch to be used as the logical environment for temporary environments.
          JIRA_NUMBER=$(echo "${{ env.FULL_BRANCH_NAME }}" | grep -oE '${{ env.JIRA_PREFIX }}-[0-9]+' || true)

          if [ -z "$JIRA_NUMBER" ]; then
            # If Jira number was not found in branch name it will generate a random logical environment name.
            echo "No JIRA number found, generating random environment name..."
            JIRA_NUMBER="env-$(LC_ALL=C tr -dc 'a-z0-9' < /dev/urandom | head -c $((RANDOM % 4 + 3)))"
          fi

          LOGICAL_ENV="$JIRA_NUMBER"
          echo "LOGICAL_ENV=$LOGICAL_ENV" >> $GITHUB_ENV

          echo "# RUN METADATA" >> $GITHUB_STEP_SUMMARY
          echo "* Logical Environment - $LOGICAL_ENV" >> $GITHUB_STEP_SUMMARY

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          role-session-name: GitHubRunner-${{ vars.BAND }}-${{ vars.LOGICAL_ENV }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Verify AWS Identity
        run: aws sts get-caller-identity

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.5

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Generate backend.config file
        working-directory: ./terraform/env
        env:
          BUCKET: ${{ vars.BUCKET }}
          LOGICAL_ENV: ${{ env.LOGICAL_ENV }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          DYNAMODB_TABLE: ${{ vars.DYNAMODB_TABLE }}
        run: |
          envsubst < backend.config.template > backend.config

          echo "Generated backend.config:"
          cat backend.config

      - name: Generate terraform.tfvars file
        working-directory: ./terraform/env
        env:
          BAND: ${{ vars.BAND }}
          LOGICAL_ENV: ${{ env.LOGICAL_ENV }}
          SUBNET_IDS: ${{ vars.SUBNET_IDS }}
          ACM_CERTIFICATE_ARN: ${{ secrets.CERTIFICATE_ARN }}
          GHCR_USER: ${{ vars.GHCR_USER }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          IMAGE_URL: ""

        run: |
          FORMATTED_SUBNET_IDS=$(echo "[\"${{ env.SUBNET_IDS }}\"]" | sed 's/, /", "/g')
          export SUBNET_IDS=$FORMATTED_SUBNET_IDS

          envsubst < terraform.tfvars.template > terraform.tfvars

          echo "Generated terraform.tfvars:"
          cat terraform.tfvars

      - name: Destroy Resources
        run: |
          mkdir -p $GITHUB_WORKSPACE/terraform-outputs
          export TF_LOG=${{ inputs.tf_log_level || 'ERROR' }}
          export TF_LOG_PATH=$GITHUB_WORKSPACE/terraform-outputs/terraform.log

          cd $GITHUB_WORKSPACE/terraform/workloads
          terraform init -backend-config=$GITHUB_WORKSPACE/terraform/env/backend.config
          terraform validate
          terraform plan -destroy -var-file=$GITHUB_WORKSPACE/terraform/env/terraform.tfvars -out=tfplan
          terraform apply -destroy -auto-approve tfplan

      - name: Upload Terraform Logs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-logs-temporary
          path: terraform-outputs/*.log
